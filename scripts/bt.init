#!/bin/bash

#	This is where we reset the BT device.

BT_WAKE_EN_num=147
BT_RST_N_num=109
BT_WAKE_EN=gpio${BT_WAKE_EN_num}
BT_RST_N=gpio${BT_RST_N_num}

if [ ! -x /sys/class/gpio/${BT_WAKE} ] ; then
  echo -n ${BT_WAKE_EN_num} > /sys/class/gpio/export
fi

if [ ! -x /sys/class/gpio/${BT_RST_N} ] ; then
  echo -n ${BT_RST_N_num}  > /sys/class/gpio/export
fi

echo -n out > /sys/class/gpio/${BT_WAKE_EN}/direction
echo -n out > /sys/class/gpio/${BT_RST_N}/direction

#	0 on the bt_reg_on (aka BT_RST_N) pin resets the device.

echo -n 0   > /sys/class/gpio/${BT_WAKE_EN}/value
echo -n 0   > /sys/class/gpio/${BT_RST_N}/value

#	1 on the bt_wake pin enables the bluetooth section ???
#	By default, the chip uses active low for the wake pin.
#	Actually, low or high, no noticeable effect.

#echo -n 1   > /sys/class/gpio/${BT_WAKE}/value

#	0 on the bt_reg_on (aka BT_RST_N) pin resets the device.
#	Set low to reset then high to start device.

echo -n 0   > /sys/class/gpio/${BT_RST_N}/value
echo -n 1   > /sys/class/gpio/${BT_RST_N}/value
